struct node {
	int dataa;
	node* next;
};

class listQueue {
private:
	node* frontNode; // 링크드리스트의 head 역할
	node* rearNode; // 링크드리스트의 tail 역할
	int n; // 큐의 크기를 저장
public:
	listQueue();
	bool empty();
	int size();
	int front();
	void enqueue(int data);
	void dequeue();
};

listQueue::listQueue() {
	frontNode = NULL;
	rearNode = NULL;
	n = 0;
}

bool listQueue::empty() {
	return (n == 0);
}

int listQueue::size() {
	return n;
}

int listQueue::front() {
	if (empty()) {
		return -1;
	}
	return frontNode->data;
}

void listQueue::enqueue(int data) {
	node* newNode = new node;
	newNode->data = data;
	newNode->next = NULL;
	if (empty())
		frontNode = rearNode = newNode;
	else {
		rearNode->next = newNode;
		rearNode = newNode;
	}
	n++;
}

void listQueue::dequeue() {
	if (empty())
		return;
	node* curNode = frontNode;
	if (size() == 1)
		frontNode = rearNode = NULL;
	else
		frontNode = frontNode->next;
	delete curNode;
	n--;
}
