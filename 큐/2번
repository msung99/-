struct node {
	int data;
	node* next;
};

class listQueue {
private:
	node* frontNode; // 링크드리스트의 head 역할
	node* rearNode; // 링크드리스트의 tail 역할
	int n; // 큐의 크기를 저장
public:
	listQueue();
	bool empty();
	int size();
	int front();
	void enqueue(int data);
	void dequeue();
	void rear();
};

listQueue::listQueue() {
	frontNode = NULL;
	rearNode = NULL;
	n = 0;
}

bool listQueue::empty() {
	return (n == 0);
}

int listQueue::size() {
	return n;
}

int listQueue::front() {
	if (empty()) {
		return -1;
	}
	return frontNode->data;
}

void listQueue::enqueue(int data) {
	node* newNode = new node;
	newNode->data = data;
	newNode->next = NULL;
	if (empty())
		frontNode = rearNode = newNode;
	else {
		rearNode->next = newNode;
		rearNode = newNode;
	}
	n++;
}

void listQueue::dequeue() {
	if (empty())
		return;
	node* curNode = frontNode;
	if (size() == 1)
		frontNode = rearNode = NULL;
	else
		frontNode = frontNode->next;
	delete curNode;
	n--;
}

void listQueue::rear()
{
	if (empty())
		cout << "Empty" << endl;
	else
		cout << this->rearNode->data << endl;
}




int play(int round, LinkedQueue p1, LinkedQueue p2) {
	for (int k = 0; k < round; k++) {
		int card = 0;
		cin >> card;
		for (int i = 0; i < card; i++) {
			int n;
			cin >> n;
			p1.enqueue(n);
		}
		for (int i = 0; i < card; i++) {
			int n;
			cin >> n;
			p2.enqueue(n);
		}
		int last_score = 0, winner = 1, p1_score = 0, p2_score = 0;
		for (int j = 0; j < card; j++) {
			int p1_card = p1.Front();
			int p2_card = p2.Front();
			(winner == 1 ? p2_card += last_score : p1_card += last_score);
			if (p1_card > p2_card) {
				last_score = p1_card - p2_card;
				winner = 1;
				p1_score++;
			}
			else if (p2_card > p1_card) {
				last_score = p2_card - p1_card;
				winner = 2;
				p2_score++;
			}
			else {
				last_score = 0;
			}
			p1.dequeue();
			p2.dequeue();
			//cout << "p1은"<< p1_card<<" p2은"<<p2_card<<" 넘어가는 점수는 " << last_score << " 이고 위너는 " << winner << endl;
		}
		int winner_score = (p1_score >= p2_score ? p1_score : p2_score);
		cout << winner_score << endl;
	}
}
int main() {
	LinkedQueue p1; LinkedQueue p2;
	int round = 0;
	cin >> round;
	cout << play(round, p1, p2) << endl;
}
