/*
1. 테이블 설정하기
D[i] : 정수 i의 1,2,3 의 합으로 나타내는 방법의 수를 저장

=====================================================

2. 점화식
D[i] = 


* D[4] 의 경우의 수에 대한 분석
CASE1) 1+1+1+1, 3+1, 2+1+1, 1+2+1  : 끝의 값이 1로 정해지는 경우
=> (3을 1,2,3의 합으로 나타내는 방법) + 1 == D[3] + 1
=> 즉, 끝이 값이 1인 경우가 4개인 이유는 D[3] 이 4이기 때문이다.

CASE2) 1+1+2, 2+2 : 끝의 값이 2로 정해지는 경우
=> (2을 1,2,3의 합으로 나타내는 방법) + 2 == D[2] + 2
=> 즉, 끝이 값이 2일때는 2를 1,2,3의 합으로 만드는 방법을 나열한 후에 끝에 2를 붙이는 상황이다.

CASE3) 1+3
=> (1을 1,2,3의 합으로 나타내는 방법) + 3 = D[1] + 3
=> 즉, 끝의 값이 1일때는 1을 1,2,3의 합으로 만드는 방법을 나열한 후 끝에 3을 붙이는 상황이다.

* 점화식 설정하기
D[4] = D[1] + D[2] + D[3] 이므로,
가장 끝에 오는 수가 1인 경우, 2인 경우, 3인 경우 총 3가지로 나누어서
생각해보면 각각의 경우는 D[i-1], D[i-2], D[i-3] 가지 이기 떄문에

=> D[i] = D[i-1] + D[i-2] + D[i-3]
이라는 점화식을 만들 수 있다.

=======================================================

3. 초기값 설정하기

초기값으로는 D[1], D[2], D[3] 이 주어져야한다.
점화식이 D[i] = D[i-1] + D[i-2] + D[i-3] 이므로,
자연스럽게 초기값이 최소 3개는 주어져야 한다.

D[1] = 1
D[2] = 2 
D[3] = 4 
*/

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

int D[11];

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	// 초기값 설정
	D[1] = 1;
	D[2] = 2;
	D[3] = 4;
	
	for (int i = 4; i <= 10; i++) {
		D[i] = D[i - 1] + D[i - 2] + D[i - 3];
	}

	int t;
	cin >> t;
	while (t--) {
		int data;
		cin >> data;
		cout << D[data] << '\n';
	}
}