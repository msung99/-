/*  %%% 잘못된 접근법 %%%  
1. 테이블 정의하기
D[i] = i번째 계단에서 올라섰을 때 점수 합의 최댓값

2. 점화식찾기
D[1] = 10, D[2] = 20, D[3] = 35, ... 을 세울 수 있지만,
D[i] 의 값을 가지고는 점화식을 세우고 싶어도
연속한 세 계단을 밟아서는 안된다는 조건이 있어서 점화식을 넣을 방법이 없다.

따라서 다른 방법으로 테이블을 정의하고 문제를 접근해야함!
*/


/*  %%% 올바른 접근법 %%%

1. 테이블 정의하기
D[i][j] = 현재까지 j개의 계단을 연속해서 밟고 i번째 계단까지
올라섰을 때 점수 합의 최댓값, 단 i번째 계단은 반드시 밟아야 함

=> 왜 이렇게 2차원 배열이 된것이냐면,
지금까지 몇 개의 계단을 밟았는지에 대한 정보가 추가적으로 있어야 점화식을 세울때 
계단을 오르는 규칙을 고려할 수 있기 때문이다.

또한 i번째 계단은 반드시 밟아야 함 이라는 조건이 있어야 점화식을 세울 수 있기 때문이다.

이 2차원 배열에서 j 의 범위는 i번째 계단을 반드시 밟아야 한다는 조건이 있어서,
j=1 또는 j=2 이다. 연속된 3개의 계단을 밟아서는 안된다는 조건이 있어서 j = 3 일수는 없다.

===================================

2. 점화식 찾기  

2-1. D[k][1] 의 값  
=> D[k][1] = max(D[k-2][1], D[k-2][[2]) + S[k]

이제 D[i][1] 과 D[i][2] 를 채워야하는데 점화식을 생각해보자.
D[k][1] 의 값이 무엇일지에 대해 생각해보자!

D[k][1] 이 의미하는 값이 무엇인지 생각해보는 테이블의 정의를 그대로 가져와보자. 

그러면 D[k][1] 은 현재까지 1개의 계단을 연속해서 밟고 
k번째 계단까지 올라섰을 때 점수 합의 최댓값이다.

현재까지 1개의 계단을 연속해서 밟았다는 의미는 곧 k-1 번쨰
계단을 밟지 않았다는 의미가 된다.

그러면 계단을 한번에 한계단씩 또는 두계단씩 오를 수 있다 했으니,,
k-2 번째 계단을 밟았다는 것은 자명하다.

=> 점화식만 이끌어 내면 되므로, k-2 번째 밑으로 내려갈 필요가 없다.

k-2 번째 계단을 밟았을때 얻은 점수의 최댓값은 
D[k-2][1] 또는 D[k-2][2] 이다.

최종적으로 D[k][1] = max(D[k-2][1], D[k-2][2]) + S[k] 임을 알 수 있다.
이때 S[k] 는 k번째 계단에 쓰여있는 점수를 의미한다.

==================================

2-2. D[k][2] 의 값 
=> D[k][2] = D[k-1][1] + S[k]

D[k][2] = 현재까지 2개의 계단을 연속해서 밟고 
k번째 계단까지 올라섰을 때 점수 합의 최댓값

현재까지 2개의 계단을 밟았으니 k-1번째 계단을 밟았다는 것은 알 수 있지만,
추가적인 조건이 1개 더 있다. k-1 번째 계단을 밟을 당시에는 1개의 계단을 연속해서 밟은 상태여야 한다.

만약 k-1 번째 계단을 밟을 당시에 2개의 계단을 연속해서 밟은 상태였다면
연속한 3개의 계단을 밟아서는 안된다는 조건에 의해 k번쨰 계단을 밟는게 불가능하기 때문이다.

따라서 D[k][2] = D[k-1][1] + S[k] 가 된다.


이렇게 얻어낸 식을 가지고 테이블을 채운뒤에 마지막 도착 계단을 반드시 밟아야한다는 조건을 고려해
max(D[n][1], D[n][2]) 을 출력하면 끝이다!!


=============================================

3. 초기값 정하기

초기값을 어디까지 두어야하는지를 생각해보면,
앞서 식에서 봤듯이 D[k][1] 을 구할때 D[k-2][1], D[k-2][2] 테이블을 참고했었다.
그러고 D[1][1], D[1][2], D[2][1], D[2][2] 을 다 초기값으로 주는것이 바람직하다.
D[1][0] 과 D[1][1] 은 주는것이 너무나도 당연하고,
D[2][0] 의 경우에도 초기값을 안주고 점화식으로 계산을 하려고 하면 D[0][1], D[0][2] 값을 가져와야 하는게 좀 이상하기 때문이다.
D[2][2] 는 엄밀히 말하면, 초기값으로 안주고 계산을 해도 되긴 하지만 그냥 D[2][2] 도 초기값으로 코드가 더 깔끔해져서 주는게 좋다.


D[1][1] = S[1],
D[1][2] = 0,
D[2][1] = S[2],
D[2][2] = S[1] + S[2]

*/

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

int s[305]; 
int n;
int d[305][3]; // d[i][j] 에서
// i의 의미 : 몇번쨰 계단인지 
// j의 의미 : 몇개의 계단을 연속적으로 올라갔는지 / j의범위 : 1~2
// d[i][j] 의 의미 : 현재까지 i번째 계단을 연속해서 밟고 i번째 계단까지 올라섰을때 점수합의 최댓값

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> s[i];
	}

	// 계단이 딱 하나인 경우 따로 처리해줄 것
	if (n == 1) {
		cout << s[1];
		return 0;
	}

	// 초기값 설정
	d[1][1] = s[1];  // 첫번쨰 계단을 1번에 올라오는 경우는 한번
	d[1][2] = 0;  // 첫번째 계단을 2번에 연속해서 올라오는 경우는 0이다.
	d[2][1] = s[2];  //
	d[2][2] = s[1] + s[2];  // 

	// 테이블 채우기
	// * s[i] : i번째 계단에 쓰여진 점수
	for (int i = 3; i <= n; i++) {
		d[i][1] = max(d[i - 2][1], d[i - 2][2]) + s[i];  // 1개의 계단을 연속해서 i번째 계단에 올라온 경우 => i-2 번쨰 계단에서 2칸을 뛰어넘어 올라온 경우이다.
		d[i][2] = d[i - 1][1] + s[i]; // 2개의 계단을 연속해서 i번쨰 계단에 올라온 경우 =>  i번쨰 계
	}
	cout << max(d[n][1], d[n][2]); // 마지막 계단(n번째 계단)에 대해 1개의 계단을 연속해서 올라온 경우와, 2개의 계단을 연속해서 올라온 경우 중에 최댓값을 계산
}